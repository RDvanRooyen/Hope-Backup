// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebUI.Data;

namespace WebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext<ApplicationUser>))]
    [Migration("20220512090328_DbUpdateContentDetailsUpdate2CPLCOnnection")]
    partial class DbUpdateContentDetailsUpdate2CPLCOnnection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebUI.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebUI.Data.Models.CPLConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("CPLConnections");
                });

            modelBuilder.Entity("WebUI.Data.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BillingRate")
                        .HasColumnType("money");

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("WebUI.Data.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyFavicon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogoImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyPhoneNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyReportEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanySenderEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ContentDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContentDetailsId");

                    b.ToTable("ContentAuthors");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentDerivation", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("DerivationId")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "DerivationId");

                    b.HasIndex("DerivationId");

                    b.ToTable("ContentDerivations");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowUserEmail")
                        .HasColumnType("bit");

                    b.Property<string>("ArtifactsFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPLConnection")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectionPdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EssentialQuestion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("FinalProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormativeAssessments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormativeAssessmentsFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialsText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenEduLicAdd")
                        .HasColumnType("bit");

                    b.Property<string>("PacingGuideFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourcesFiles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourcesText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummativeAssessments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummativeAssessmentsFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("ContentDetails");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("RelitivePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentFiles");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentGrade", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("ContentGrades");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentStandard", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "StandardId");

                    b.HasIndex("StandardId");

                    b.ToTable("ContentStandards");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentSubject", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ContentSubjects");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentTopic", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("ContentTopics");
                });

            modelBuilder.Entity("WebUI.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("WebUI.Data.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("BillingRate")
                        .HasColumnType("money");

                    b.Property<int>("BillingType")
                        .HasColumnType("int");

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("money");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedRevenue")
                        .HasColumnType("money");

                    b.Property<int>("InvoiceFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReferralPercent")
                        .HasColumnType("money");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("ChangedById");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WebUI.Data.Models.Reports.ClientProjectRow", b =>
                {
                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.ToTable("ClientProjectRow", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("WebUI.Data.Models.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("WebUI.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("WebUI.Data.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("WebUI.Data.Models.UserGrade", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("WebUI.Data.Models.UserSubject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("UserSubjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebUI.Data.ApplicationUser", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("UserChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("ApplicationUser$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("UserCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("ApplicationUser$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.CPLConnection", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("CPLConnectionChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("CPLConnection$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("CPLConnectionCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("CPLConnection$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.Client", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("ClientChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("Client$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("ClientCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("Client$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.Company", b =>
                {
                    b.OwnsOne("WebUI.Data.Models.Address", "CompanyAddress", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("CompanyAddressLine1")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("CompanyCity")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("CompanyState")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("CompanyZipCode")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentAuthor", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("WebUI.Data.Models.ContentDetails", null)
                        .WithMany("CoAuthors")
                        .HasForeignKey("ContentDetailsId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentDerivation", b =>
                {
                    b.HasOne("WebUI.Data.Models.ContentDetails", "ContentDetails")
                        .WithMany("Derivations")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebUI.Data.Models.ContentDetails", "Derivation")
                        .WithMany("ContentDerivations")
                        .HasForeignKey("DerivationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentDetails");

                    b.Navigation("Derivation");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentDetails", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("ContentChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("ContentDetails$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("ContentCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("ContentDetails$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentFiles", b =>
                {
                    b.HasOne("WebUI.Data.Models.ContentDetails", "Content")
                        .WithMany("ContentFiles")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentGrade", b =>
                {
                    b.HasOne("WebUI.Data.Models.ContentDetails", "ContentDetails")
                        .WithMany("ContentGrades")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.Models.Grade", "Grade")
                        .WithMany("ContentGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentDetails");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentStandard", b =>
                {
                    b.HasOne("WebUI.Data.Models.ContentDetails", "ContentDetails")
                        .WithMany("ContentStandards")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.Models.Standard", "Standard")
                        .WithMany("ContentStandards")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentDetails");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentSubject", b =>
                {
                    b.HasOne("WebUI.Data.Models.ContentDetails", "ContentDetails")
                        .WithMany("ContentSubjects")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.Models.Subject", "Subject")
                        .WithMany("ContentSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentDetails");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentTopic", b =>
                {
                    b.HasOne("WebUI.Data.Models.ContentDetails", "ContentDetails")
                        .WithMany("ContentTopics")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.Models.Topic", "Topic")
                        .WithMany("ContentTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentDetails");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WebUI.Data.Models.Grade", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("GradeChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("Grade$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("GradeCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("Grade$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.Project", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("ProjectChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("Project$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("ProjectCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("Project$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.Standard", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("StandardChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("Standard$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("StandardCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("Standard$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.Subject", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("SubjectChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("Subject$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("SubjectCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("Subject$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.Topic", b =>
                {
                    b.HasOne("WebUI.Data.ApplicationUser", "ChangedBy")
                        .WithMany("TopicChangedBy")
                        .HasForeignKey("ChangedById")
                        .HasConstraintName("Topic$tblAspNetUsersChangedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "CreatedBy")
                        .WithMany("TopicCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("Topic$tblAspNetUsersCreatedBy");

                    b.HasOne("WebUI.Data.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.Navigation("ChangedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.UserGrade", b =>
                {
                    b.HasOne("WebUI.Data.Models.Grade", "Grade")
                        .WithMany("UserGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.ApplicationUser", "User")
                        .WithMany("Grades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebUI.Data.Models.UserSubject", b =>
                {
                    b.HasOne("WebUI.Data.Models.Subject", "Subject")
                        .WithMany("UserSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Data.ApplicationUser", "User")
                        .WithMany("Subjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebUI.Data.ApplicationUser", b =>
                {
                    b.Navigation("ClientChangedBy");

                    b.Navigation("ClientCreatedBy");

                    b.Navigation("ContentChangedBy");

                    b.Navigation("ContentCreatedBy");

                    b.Navigation("CPLConnectionChangedBy");

                    b.Navigation("CPLConnectionCreatedBy");

                    b.Navigation("GradeChangedBy");

                    b.Navigation("GradeCreatedBy");

                    b.Navigation("Grades");

                    b.Navigation("ProjectChangedBy");

                    b.Navigation("ProjectCreatedBy");

                    b.Navigation("StandardChangedBy");

                    b.Navigation("StandardCreatedBy");

                    b.Navigation("SubjectChangedBy");

                    b.Navigation("SubjectCreatedBy");

                    b.Navigation("Subjects");

                    b.Navigation("TopicChangedBy");

                    b.Navigation("TopicCreatedBy");

                    b.Navigation("UserChangedBy");

                    b.Navigation("UserCreatedBy");
                });

            modelBuilder.Entity("WebUI.Data.Models.ContentDetails", b =>
                {
                    b.Navigation("CoAuthors");

                    b.Navigation("ContentDerivations");

                    b.Navigation("ContentFiles");

                    b.Navigation("ContentGrades");

                    b.Navigation("ContentStandards");

                    b.Navigation("ContentSubjects");

                    b.Navigation("ContentTopics");

                    b.Navigation("Derivations");
                });

            modelBuilder.Entity("WebUI.Data.Models.Grade", b =>
                {
                    b.Navigation("ContentGrades");

                    b.Navigation("UserGrades");
                });

            modelBuilder.Entity("WebUI.Data.Models.Standard", b =>
                {
                    b.Navigation("ContentStandards");
                });

            modelBuilder.Entity("WebUI.Data.Models.Subject", b =>
                {
                    b.Navigation("ContentSubjects");

                    b.Navigation("UserSubjects");
                });

            modelBuilder.Entity("WebUI.Data.Models.Topic", b =>
                {
                    b.Navigation("ContentTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
